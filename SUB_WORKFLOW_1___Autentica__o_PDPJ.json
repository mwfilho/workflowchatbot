{
  "name": "SUB-WORKFLOW 1 - Autenticação PDPJ",
  "nodes": [
    {
      "parameters": {
        "workflowInputs": {
          "values": [
            {
              "name": "forceNewLogin",
              "type": "boolean"
            }
          ]
        }
      },
      "id": "4d79b857-436e-4eb6-8b20-ff24c8dffd6b",
      "name": "Workflow Trigger",
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "position": [
        0,
        -40
      ],
      "typeVersion": 1.1
    },
    {
      "parameters": {
        "jsCode": "\"// Verificar token existente no staticData\\nconst staticData = $getWorkflowStaticData('global');\\nconst now = Date.now();\\nconst forceNewLogin = $json.forceNewLogin || false;\\n\\nif (!forceNewLogin &&\\n    staticData.pdpj_auth &&\\n    staticData.pdpj_auth.access_token &&\\n    staticData.pdpj_auth.expires_at > now) {\\n  const remainingTime = Math.floor((staticData.pdpj_auth.expires_at - now) / 1000);\\n  console.log(`\\u2705 Token v\\u00e1lido por mais ${remainingTime} segundos`);\\n  return {\\n    success: true,\\n    tokenValid: true,\\n    access_token: staticData.pdpj_auth.access_token,\\n    refresh_token: staticData.pdpj_auth.refresh_token,\\n    token_type: staticData.pdpj_auth.token_type,\\n    expires_in: remainingTime,\\n    source: 'cache'\\n  };\\n}\\n\\nconst refreshToken = staticData.pdpj_auth ? staticData.pdpj_auth.refresh_token : null;\\nconsole.log('\\ud83d\\udd04 Token expirado ou inexistente.');\\nreturn {\\n  success: false,\\n  tokenValid: false,\\n  needsLogin: true,\\n  refresh_token: refreshToken,\\n  token_type: staticData.pdpj_auth?.token_type || 'Bearer'\\n};\\n\""
      },
      "id": "9690ed26-b9e8-4c99-8853-737c8af58579",
      "name": "Check Existing Token",
      "type": "n8n-nodes-base.code",
      "position": [
        300,
        -40
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "boolean": [
            {
              "value1": "={{ $json.tokenValid }}",
              "value2": true
            }
          ],
          "string": [
            {}
          ]
        }
      },
      "id": "d5d646a1-2f1f-41f3-91b6-5f2f2640613f",
      "name": "Token Valid?",
      "type": "n8n-nodes-base.if",
      "position": [
        600,
        -40
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://sso.cloud.pje.jus.br/auth/realms/pje/protocol/openid-connect/token",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            },
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36"
            }
          ]
        },
        "sendBody": true,
        "contentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "grant_type",
              "value": "password"
            },
            {
              "name": "client_id",
              "value": "portalexterno-frontend"
            },
            {
              "name": "username",
              "value": "06293234456"
            },
            {
              "name": "password",
              "value": "Simb@280303"
            },
            {
              "name": "scope",
              "value": "openid profile email"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 30000
        }
      },
      "id": "6152abe6-19e0-465f-bee2-b3a703564bea",
      "name": "PDPJ OAuth Login",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        800,
        40
      ],
      "typeVersion": 4.2,
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://sso.cloud.pje.jus.br/auth/realms/pje/protocol/openid-connect/token",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/x-www-form-urlencoded"
            }
          ]
        },
        "sendBody": true,
        "contentType": "form-urlencoded",
        "bodyParameters": {
          "parameters": [
            {
              "name": "grant_type",
              "value": "refresh_token"
            },
            {
              "name": "client_id",
              "value": "portalexterno-frontend"
            },
            {
              "name": "refresh_token",
              "value": "={{ $node['Check Existing Token'].json.refresh_token }}"
            }
          ]
        },
        "options": {
          "timeout": 20000
        }
      },
      "id": "169e4c1c-4404-47cf-a067-d8cfeaef2d82",
      "name": "Refresh Token",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        500,
        380
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "jsCode": "// Processar resposta de autenticação\nconst response = $json;\n\nif (!response.access_token) {\n    throw new Error('Falha na autenticação: Token não recebido');\n}\n\n// Calcular tempo de expiração\nconst expiresIn = response.expires_in || 3600;\nconst expiresAt = Date.now() + (expiresIn * 1000) - 300000; // 5 min de margem\n\n// Preparar dados para salvar no banco\nreturn {\n    token_key: 'pdpj_main_token', // Chave única para identificar\n    access_token: response.access_token,\n    refresh_token: response.refresh_token || null,\n    token_type: response.token_type || 'Bearer',\n    expires_at: expiresAt,\n    expires_in: expiresIn,\n    success: true\n};"
      },
      "id": "2acb36fb-ff83-495b-9878-bf16e3fb9369",
      "name": "Prepare Token Data",
      "type": "n8n-nodes-base.code",
      "position": [
        1000,
        80
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT * FROM pdpj_tokens \nWHERE token_key = 'pdpj_main_token' \nAND expires_at > $1\nLIMIT 1;",
        "options": {
          "queryReplacement": "={{ Date.now() }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1220,
        80
      ],
      "id": "bbb7823d-022a-4818-873c-969ac3b995ac",
      "name": "Check Existing Token1",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "yaadLkWVMaWfr0vx",
          "name": "Postgres account Railway"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "098fe5ea-c48f-4019-8787-221e0fbf6ed5",
              "leftValue": "={{ $json.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1440,
        80
      ],
      "id": "a6af4c08-7b36-47f8-8608-ee832a52c99b",
      "name": "Token Exists?"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO pdpj_tokens (token_key, access_token, refresh_token, token_type, expires_at)\nVALUES ($1, $2, $3, $4, $5)\nON CONFLICT (token_key) \nDO UPDATE SET \n    access_token = EXCLUDED.access_token,\n    refresh_token = EXCLUDED.refresh_token,\n    token_type = EXCLUDED.token_type,\n    expires_at = EXCLUDED.expires_at,\n    updated_at = CURRENT_TIMESTAMP\nRETURNING *;",
        "options": {
          "queryReplacement": "={{ $node[\"Prepare Token Data\"].json.token_key }},{{ $node[\"Prepare Token Data\"].json.access_token }},{{ $node[\"Prepare Token Data\"].json.refresh_token }},{{ $node[\"Prepare Token Data\"].json.token_type }},{{ $node[\"Prepare Token Data\"].json.expires_at }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1660,
        180
      ],
      "id": "5a6714c8-fee5-4a0b-b2b8-1e99fdc5ba68",
      "name": "Insert Token",
      "credentials": {
        "postgres": {
          "id": "yaadLkWVMaWfr0vx",
          "name": "Postgres account Railway"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE pdpj_tokens \nSET access_token = $2,\n    refresh_token = $3,\n    token_type = $4,\n    expires_at = $5,\n    updated_at = CURRENT_TIMESTAMP\nWHERE token_key = $1\nRETURNING *;",
        "options": {
          "queryReplacement": "={{ $node[\"Prepare Token Data\"].json.token_key }},{{ $node[\"Prepare Token Data\"].json.access_token }},{{ $node[\"Prepare Token Data\"].json.refresh_token }},{{ $node[\"Prepare Token Data\"].json.token_type }},{{ $node[\"Prepare Token Data\"].json.expires_at }}"
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1660,
        0
      ],
      "id": "0cb21cf2-89cc-4c90-a6f8-1e7b43f60fdb",
      "name": "Update Token",
      "credentials": {
        "postgres": {
          "id": "yaadLkWVMaWfr0vx",
          "name": "Postgres account Railway"
        }
      }
    },
    {
      "parameters": {
        "mode": "raw",
        "jsonOutput": "=const inputData = $input.first().json;\n\nreturn {\n  success: inputData.success || inputData.tokenValid,\n  access_token: inputData.access_token,\n  refresh_token: inputData.refresh_token,\n  token_type: inputData.token_type || 'Bearer',\n  expires_in: inputData.expires_in,\n  expires_at: inputData.expires_at,\n  source: inputData.source,\n  response: JSON.stringify({\n    success: true,\n    access_token: inputData.access_token,\n    token_type: inputData.token_type || 'Bearer'\n  })\n}",
        "options": {}
      },
      "id": "0a462e75-8230-44be-8353-41229dd51c07",
      "name": "Format Output2",
      "type": "n8n-nodes-base.set",
      "position": [
        1940,
        320
      ],
      "typeVersion": 3.4,
      "disabled": true
    },
    {
      "parameters": {
        "jsCode": "// Processar dados para retorno\nconst inputData = $input.first().json;\n\n// Verificar de onde vem os dados\nlet responseData;\n\nif (inputData.id && inputData.token_key) {\n  // Vem do banco de dados\n  const expiresAtTimestamp = parseInt(inputData.expires_at);\n  \n  responseData = {\n    success: true,\n    access_token: inputData.access_token,\n    refresh_token: inputData.refresh_token,\n    token_type: inputData.token_type || 'Bearer',\n    expires_in: Math.floor((expiresAtTimestamp - Date.now()) / 1000),\n    expires_at: expiresAtTimestamp,\n    source: 'database'\n  };\n} else {\n  // Vem do cache ou login direto\n  responseData = {\n    success: inputData.success || inputData.tokenValid,\n    access_token: inputData.access_token,\n    refresh_token: inputData.refresh_token,\n    token_type: inputData.token_type || 'Bearer',\n    expires_in: inputData.expires_in,\n    expires_at: inputData.expires_at,\n    source: inputData.source || 'cache'\n  };\n}\n\n// Salvar no staticData global\nconst staticData = $getWorkflowStaticData('global');\nif (responseData.success && responseData.access_token) {\n  staticData.pdpj_auth = {\n    access_token: responseData.access_token,\n    refresh_token: responseData.refresh_token,\n    token_type: responseData.token_type,\n    expires_at: responseData.expires_at\n  };\n}\n\n// Adicionar response formatada\nresponseData.response = JSON.stringify({\n  success: true,\n  access_token: responseData.access_token,\n  token_type: responseData.token_type\n});\n\nreturn responseData;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1900,
        -40
      ],
      "id": "ccb8549c-6a5a-45c9-afc3-acd902dcc03d",
      "name": "Format Output"
    }
  ],
  "pinData": {},
  "connections": {
    "Workflow Trigger": {
      "main": [
        [
          {
            "node": "Check Existing Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Existing Token": {
      "main": [
        [
          {
            "node": "Token Valid?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Token Valid?": {
      "main": [
        [
          {
            "node": "Format Output",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Refresh Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PDPJ OAuth Login": {
      "main": [
        [
          {
            "node": "Prepare Token Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Refresh Token": {
      "main": [
        [
          {
            "node": "Prepare Token Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Token Data": {
      "main": [
        [
          {
            "node": "Check Existing Token1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Existing Token1": {
      "main": [
        [
          {
            "node": "Token Exists?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Token Exists?": {
      "main": [
        [
          {
            "node": "Update Token",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Insert Token",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert Token": {
      "main": [
        [
          {
            "node": "Format Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Token": {
      "main": [
        [
          {
            "node": "Format Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "a0020597-624b-4b6c-9dd3-c11939bc6fc2",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "9601c2da077393e3c7d395982728b7744de7ac7dd087f4789f3781b83e316e6e"
  },
  "id": "gBuv1OdwwrFlg23a",
  "tags": []
}
